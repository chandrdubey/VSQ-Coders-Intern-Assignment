{"version":3,"sources":["componets/BookClass.js","App.js","serviceWorker.js","index.js"],"names":["BookClass","handleSelectChange","event","setState","x","target","value","courseData","state","apiData","courseSelect","course_name","console","log","handleChange","name","handleSubmit","preventDefault","alert","parentName","parentContactNo","email","ageOfChild","nameOfChild","slotDate","slotTime","timeSlot","isLoading","todayDate","Date","latestSlotDate","setHours","getHours","latestSlotDay","getDate","this","axios","get","then","response","data","catch","error","now","timeSlots","today","lastDate","setDate","lastDay","slots","timeArr","getSlotInHours","hour","filter","time","parseInt","slotStart","substr","map","className","onSubmit","htmlFor","type","id","aria-describedby","placeholder","onChange","length","index","key","course_id","min","max","slot","slotEnd","Component","dd","mm","getMonth","getFullYear","forEach","slotInfo","eachSlot","date","hours","slotEndHour","minutes","getMinutes","slotEndTime","formattedTime","push","sort","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.35e1c1d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass BookClass extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      parentName: \"\",\r\n      parentContactNo: \"\",\r\n      email: \"\",\r\n      nameOfChild: \"\",\r\n      ageOfChild: \"\",\r\n      apiData: [],\r\n      courseData: {},\r\n      courseSelect: \"Select\",\r\n      x: -1,\r\n      timeSlot: [],\r\n      slotDate: \"1999-02-23\",\r\n      slotTime: \"Select\",\r\n      isLoading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let todayDate = new Date();\r\n    let latestSlotDate = new Date();\r\n    latestSlotDate.setHours(todayDate.getHours() + 4);\r\n    const latestSlotDay = getDate(latestSlotDate);\r\n\r\n    this.setState({\r\n      slotDate: latestSlotDay,\r\n    });\r\n    axios\r\n      .get(\r\n        \"https://script.google.com/macros/s/AKfycbzJ8Nn2ytbGO8QOkGU1kfU9q50RjDHje4Ysphyesyh-osS76wep/exec\"\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        // handle success\r\n\r\n        this.setState({\r\n          apiData: response.data,\r\n          courseData: this.state.apiData[0],\r\n          isLoading: false,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      });\r\n  }\r\n  //this function handle the changes in select course\r\n  handleSelectChange = (event) => {\r\n    this.setState({\r\n      // courseData:this.state.apiData[event.target.value-1],\r\n      x: event.target.value,\r\n      courseData: this.state.apiData[event.target.value],\r\n    });\r\n    if(this.state.x !== -1)\r\n    {\r\n      this.setState({\r\n        // courseData:this.state.apiData[event.target.value-1],\r\n       courseSelect: this.state.apiData[event.target.value].course_name\r\n      });\r\n    }\r\n    console.log(event.target.value);\r\n    console.log(this.state.x);\r\n  };\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(\r\n      `${this.state.parentName} , ${this.state.parentContactNo}, ${this.state.email} ,\r\n      ${this.state.ageOfChild}  ,${this.state.nameOfChild}, ${this.state.courseSelect},\r\n      ${this.state.slotDate} , ${this.state.slotTime}`\r\n    );\r\n  };\r\n\r\n  render() {\r\n    console.log(Date.now());\r\n    let todayDate = new Date();\r\n    let timeSlots = [];\r\n    const today = getDate(todayDate);\r\n    //Getting last day of booking\r\n    let lastDate = new Date();\r\n    lastDate.setDate(todayDate.getDate() + 7);\r\n\r\n    //converting in the format which we can use in html input type of date\r\n    const lastDay = getDate(lastDate);\r\n    console.log(this.state.courseData);\r\n\r\n    //Checking if we got data from API\r\n    if (this.state.courseData && this.state.courseData.slots) {\r\n      //Getting time in hours and minutes\r\n      let timeArr = getSlotInHours(this.state.courseData.slots);\r\n      //Now checking if slot day is today. if it is then weill show the slot 4 hour after from now\r\n      if (today === this.state.slotDate) {\r\n        const hour = todayDate.getHours() + 4;\r\n\r\n        timeSlots = timeArr.filter(\r\n          (time) => parseInt(time.slotStart.substr(0, 2)) >= hour\r\n        );\r\n        console.log(`${timeSlots} hard`);\r\n      }\r\n      //if booking day is last then only slot will show which are before the present time\r\n      else if (lastDay === this.state.slotDate) {\r\n        const hour = lastDate.getHours();\r\n        timeArr.map((time) =>\r\n          console.log(parseInt(time.slotStart.substr(0, 2)))\r\n        );\r\n        timeSlots = timeArr.filter(\r\n          (time) => parseInt(time.substr(0, 2)) <= hour\r\n        );\r\n      }\r\n      //all slot will show\r\n      else {\r\n        timeSlots = timeArr;\r\n      }\r\n    }\r\n\r\n    return this.state.isLoading ? (\r\n      <div> Loadding</div>\r\n    ) : (\r\n      <div>\r\n        <h2 className=\"text-center\">Book a trial class </h2>\r\n        <form className=\"mx-auto\" onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"exampleInputEmail1\">Parent Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"Parent Name\"\r\n              name=\"parentName\"\r\n              value={this.state.parentName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"exampleInputEmail1\">Parent Contact Number</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"Parent Contact Number\"\r\n              name=\"parentContactNo\"\r\n              value={this.state.parentContactNo}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputEmail1\">Parent Email address</label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"Enter email\"\r\n              name=\"email\"\r\n              value={this.state.email}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"exampleInputEmail1\">Name of Child</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"Child Name\"\r\n              name=\"nameOfChild\"\r\n              value={this.state.nameOfChild}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"exampleInputEmail1\">Age of Child</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              placeholder=\"Age of Child\"\r\n              name=\"ageOfChild\"\r\n              value={this.state.ageOfChild}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group  course-select\">\r\n            <label htmlFor=\"inputState\">Select Course</label>\r\n            <select\r\n              id=\"inputState\"\r\n              className=\"form-control\"\r\n              value={this.state.x}\r\n              onChange={this.handleSelectChange}\r\n            >\r\n              <option value=\"-1\">Select</option>\r\n              {this.state.apiData.length > 0 &&\r\n                this.state.apiData.map((data, index) => (\r\n                  <option value={index} key={data.course_id}>\r\n                    {data.course_name}\r\n                  </option>\r\n                ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group  course-select\">\r\n          <label htmlFor=\"exampleInputdate\">Select Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"slotDate\"\r\n              id=\"exampleInputdate\"\r\n              className=\"form-control\"\r\n              value={this.state.slotDate}\r\n              min={today}\r\n              max={lastDay}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group  course-select\">\r\n            <label htmlFor=\"inputState\">Book Trial Class</label>\r\n            <select\r\n              id=\"inputState\"\r\n              className=\"form-control\"\r\n              name=\"slotTime\"\r\n              value={this.state.slotTime}\r\n              onChange={this.handleChange}\r\n            >\r\n              {timeSlots.length > 0 ? (\r\n                timeSlots.map((slot, index) => (\r\n                  <option\r\n                    value={slot.slotStart + \"-\" + slot.slotEnd}\r\n                    key={index}\r\n                  >\r\n                    {slot.slotStart + \"-\" + slot.slotEnd}\r\n                  </option>\r\n                ))\r\n              ) : (\r\n                <option value=\"select\">No class available</option>\r\n              )}\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//it will give date in a format which use in html input type of date\r\nconst getDate = (todayDate) => {\r\n  let dd = todayDate.getDate();\r\n  let mm = todayDate.getMonth() + 1; //January is 0!\r\n  let yyyy = todayDate.getFullYear();\r\n\r\n  // let yyyy = today.getFullYear();\r\n  if (dd < 10) {\r\n    dd = \"0\" + dd;\r\n  }\r\n  if (mm < 10) {\r\n    mm = \"0\" + mm;\r\n  }\r\n  let today = yyyy + \"-\" + mm + \"-\" + dd;\r\n  return today;\r\n};\r\n//it will convert the tim stamp in houre and minutes\r\nconst getSlotInHours = (slots) => {\r\n  let timeSlot = [];\r\n  slots.forEach((slotInfo) => {\r\n    let eachSlot = parseInt(slotInfo.slot);\r\n    let date = new Date(eachSlot);\r\n    // let endTime\r\n    let hours = date.getHours();\r\n    let slotEndHour = hours + 1;\r\n    // Minutes part from the timestamp\r\n    let minutes = \"0\" + date.getMinutes();\r\n    // Seconds part from the timestamp\r\n    let slotEndTime = slotEndHour + \":\" + minutes.substr(-2);\r\n    // Will display time in 10:30:23 format\r\n    let formattedTime = hours + \":\" + minutes.substr(-2);\r\n    //  console.log(formattedTime);\r\n    timeSlot.push({ slotStart: formattedTime, slotEnd: slotEndTime });\r\n  });\r\n  timeSlot.sort();\r\n  return timeSlot;\r\n};\r\nexport default BookClass;\r\n","import React from 'react';\nimport './App.css';\nimport BookClass from './componets/BookClass';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <BookClass/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}